package main

import "fmt"

func main() {
	fmt.Println("Hello World")
}

/*
变量的生命周期指的是在程序运行期间变量有效存在的时间间隔。对于在包一级声明的变量
来说，它们的生命周期和整个程序的运行周期是一致的。而相比之下，局部变量的声明周期
则是动态的：每次从创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变
量的存储空间可能被回收。函数的参数变量和返回值变量都是局部变量。它们在函数每次被
调用的时候创建。

那么Go语言的自动垃圾收集器是如何知道一个变量是何时可以被回收的呢？基本的实现思路是，从每个包级的变量和每个当前运行函数的每一个局部变量开始，
通过指针或引用的访问路径遍历，是否可以找到该变量。
如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果。
*/
